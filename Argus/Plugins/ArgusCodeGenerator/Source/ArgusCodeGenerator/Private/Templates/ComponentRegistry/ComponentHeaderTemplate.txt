#pragma region #####
private:
	static #####* s_#####s;
	static TBitArray<ArgusContainerAllocator<ArgusECSConstants::k_numBitBuckets> > s_is#####Active;
public:
	template<>
	inline #####* GetComponent<#####>(uint16 entityId)
	{
		if (UNLIKELY(!s_#####s))
		{
			return nullptr;
		}

		if (UNLIKELY(entityId >= ArgusECSConstants::k_maxEntities))
		{
			ARGUS_LOG(ArgusECSLog, Error, TEXT("[%s] Invalid entity id %d, used when getting %s."), ARGUS_FUNCNAME, entityId, ARGUS_NAMEOF(#####));
			return nullptr;
		}

		if (UNLIKELY(s_is#####Active.Num() == 0))
		{
			return nullptr;
		}

		if (!s_is#####Active[entityId])
		{
			return nullptr;
		}

		return &s_#####s[entityId];
	}

	template<>
	inline #####* AddComponent<#####>(uint16 entityId)
	{
		if (UNLIKELY(!s_#####s))
		{
			return nullptr;
		}

		if (UNLIKELY(entityId >= ArgusECSConstants::k_maxEntities))
		{
			ARGUS_LOG(ArgusECSLog, Error, TEXT("[%s] Invalid entity id %d, used when adding %s."), ARGUS_FUNCNAME, entityId, ARGUS_NAMEOF(#####));
			return nullptr;
		}

		if (UNLIKELY(s_is#####Active.Num() == 0))
		{
			s_is#####Active.SetNum(ArgusECSConstants::k_maxEntities, false);
		}

		if (UNLIKELY(s_is#####Active[entityId]))
		{
			ARGUS_LOG(ArgusECSLog, Warning, TEXT("[%s] Attempting to add a %s to entity %d, which already has one."), ARGUS_FUNCNAME, ARGUS_NAMEOF(#####), entityId);
			return &s_#####s[entityId];
		}

		s_is#####Active[entityId] = true;
		s_#####s[entityId].Reset();
		return &s_#####s[entityId];
	}

	template<>
	inline #####* GetOrAddComponent<#####>(uint16 entityId)
	{
		if (UNLIKELY(!s_#####s))
		{
			return nullptr;
		}

		if (UNLIKELY(entityId >= ArgusECSConstants::k_maxEntities))
		{
			ARGUS_LOG(ArgusECSLog, Error, TEXT("[%s] Invalid entity id %d, used when adding %s."), ARGUS_FUNCNAME, entityId, ARGUS_NAMEOF(#####));
			return nullptr;
		}

		if (UNLIKELY(s_is#####Active.Num() == 0))
		{
			s_is#####Active.SetNum(ArgusECSConstants::k_maxEntities, false);
		}

		if (s_is#####Active[entityId])
		{
			return &s_#####s[entityId];
		}
		else
		{
			s_is#####Active[entityId] = true;
			s_#####s[entityId].Reset();
			return &s_#####s[entityId];
		}
	}

	friend struct #####;
#pragma endregion