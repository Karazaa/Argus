#pragma region #####
private:
	static ArgusMap<uint16, #####*, ArgusSetAllocator<1> > s_#####s;
public:
	template<>
	inline #####* GetComponent<#####>(uint16 entityId)
	{
		if (UNLIKELY(entityId >= ArgusECSConstants::k_maxEntities))
		{
			ARGUS_LOG(ArgusECSLog, Error, TEXT("[%s] Invalid entity id %d, used when getting %s."), ARGUS_FUNCNAME, entityId, ARGUS_NAMEOF(#####));
			return nullptr;
		}

		if (!s_#####s.Contains(entityId))
		{
			return nullptr;
		}

		return s_#####s[entityId];
	}

	template<>
	inline #####* AddComponent<#####>(uint16 entityId)
	{
		if (UNLIKELY(entityId >= ArgusECSConstants::k_maxEntities))
		{
			ARGUS_LOG(ArgusECSLog, Error, TEXT("[%s] Invalid entity id %d, used when adding %s."), ARGUS_FUNCNAME, entityId, ARGUS_NAMEOF(#####));
			return nullptr;
		}

		if (UNLIKELY(s_#####s.Contains(entityId)))
		{
			ARGUS_LOG(ArgusECSLog, Warning, TEXT("[%s] Attempting to add a %s to entity %d, which already has one."), ARGUS_FUNCNAME, ARGUS_NAMEOF(#####), entityId);
			return s_#####s[entityId];
		}

		#####* output = new (ArgusMemorySource::Allocate<#####>()) #####();
		s_#####s.Emplace(entityId, output);
		return output;
	}

	template<>
	inline #####* GetOrAddComponent<#####>(uint16 entityId)
	{
		if (UNLIKELY(entityId >= ArgusECSConstants::k_maxEntities))
		{
			ARGUS_LOG(ArgusECSLog, Error, TEXT("[%s] Invalid entity id %d, used when adding %s."), ARGUS_FUNCNAME, entityId, ARGUS_NAMEOF(#####));
			return nullptr;
		}

		if (!s_#####s.Contains(entityId))
		{
			#####* output = new (ArgusMemorySource::Allocate<#####>()) #####();
			s_#####s.Emplace(entityId, output);
			return output;
		}

		return s_#####s[entityId];
	}
#pragma endregion