// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "ArgusComponentRegistry.h"
#include "ArgusEntity.h"
#include "ArgusMemorySource.h"

// Begin component specific definitions
@@@@@
^^^^^

void ArgusComponentRegistry::RemoveComponentsForEntity(uint16 entityId)
{
	if (UNLIKELY(entityId >= ArgusECSConstants::k_maxEntities))
	{
		ARGUS_LOG(ArgusECSLog, Error, TEXT("[%s] Invalid entity id %d."), ARGUS_FUNCNAME, entityId);
		return;
	}

	// Begin set bitset bits to false
	*****

	// Begin set component values
	~~~~~

	// Begin remove dynamically allocated components
	?????
}

void ArgusComponentRegistry::FlushAllComponents()
{
	// Begin flush active component bitsets. Allocate component arrays if necessary.
	#####

	// Begin flush component values or construct components.
	for (uint16 i = 0u; i < ArgusECSConstants::k_maxEntities; ++i)
	{
		$$$$$
	}

	// Begin flush dynamically allocated components
	&&&&&
}

uint16 ArgusComponentRegistry::GetOwningEntityIdForComponentMember(void* memberAddress)
{
	#&#&#

	return ArgusECSConstants::k_maxEntities;
}

#if !UE_BUILD_SHIPPING
void ArgusComponentRegistry::DrawComponentsDebug(uint16 entityId)
{
	!!!!!
}
#endif //!UE_BUILD_SHIPPING