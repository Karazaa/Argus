// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "RecordDatabases/TeamColorRecordDatabase.h"
#include "ArgusLogging.h"
#include "ArgusMacros.h"

#if WITH_EDITOR
#include "ArgusStaticData.h"
#include "Editor.h"
#include "Misc/Paths.h"
#include "Subsystems/EditorAssetSubsystem.h"
#include "UObject/ObjectMacros.h"
#include "UObject/ObjectSaveContext.h"
#include <filesystem>
#endif

const UTeamColorRecord* UTeamColorRecordDatabase::GetRecord(uint32 id)
{
	ARGUS_MEMORY_TRACE(ArgusStaticData);

	if (static_cast<uint32>(m_UTeamColorRecordsPersistent.Num()) <= id)
	{
		ResizePersistentObjectPointerArray();
		
		if (static_cast<uint32>(m_UTeamColorRecordsPersistent.Num()) <= id)
		{
			ARGUS_LOG
			(
				ArgusStaticDataLog, Error,
				TEXT("[%s] Could not find %s %d in %s."),
				ARGUS_FUNCNAME,
				ARGUS_NAMEOF(id),
				id,
				ARGUS_NAMEOF(UTeamColorRecordDatabase)
			);

			return nullptr;
		}
	}

	if (id == 0u)
	{
		return nullptr;
	}

	if (!m_UTeamColorRecordsPersistent[id])
	{
		m_UTeamColorRecordsPersistent[id] = m_UTeamColorRecords[id].LoadSynchronous();
	}

	if (m_UTeamColorRecordsPersistent[id])
	{
		m_UTeamColorRecordsPersistent[id]->m_id = id;
	}

	return m_UTeamColorRecordsPersistent[id];
}

void UTeamColorRecordDatabase::ResizePersistentObjectPointerArray()
{
	ARGUS_MEMORY_TRACE(ArgusStaticData);

	m_UTeamColorRecordsPersistent.SetNumZeroed(m_UTeamColorRecords.Num());
}

#if WITH_EDITOR
void UTeamColorRecordDatabase::PreSave(FObjectPreSaveContext saveContext)
{
	FString fullPath = FPaths::ConvertRelativePathToFull(saveContext.GetTargetFilename());
	if (!std::filesystem::exists(TCHAR_TO_UTF8(*fullPath)))
	{
		TArray<FReferencerInformation> internalReferencers;
		TArray<FReferencerInformation> externalReferencers;
		RetrieveReferencers(&internalReferencers, &externalReferencers);

		if (internalReferencers.IsEmpty() && externalReferencers.IsEmpty())
		{
			ArgusStaticData::RegisterNewUTeamColorRecordDatabase(this);
		}
	}

	Super::PreSave(saveContext);
}

void UTeamColorRecordDatabase::PostEditChangeProperty(FPropertyChangedEvent& propertyChangedEvent)
{
	if (propertyChangedEvent.ChangeType != EPropertyChangeType::ValueSet)
	{
		return;
	}

	const FString propertyName = propertyChangedEvent.GetPropertyName().ToString();
	const FString recordPropertyName = ARGUS_NAMEOF(m_UTeamColorRecords);
	if (!propertyName.Equals(recordPropertyName))
	{
		return;
	}

	const int32 arrayIndex = propertyChangedEvent.GetArrayIndex(propertyName);
	UTeamColorRecord* modifiedUTeamColorRecord = m_UTeamColorRecords[arrayIndex].LoadSynchronous();
	if (!modifiedUTeamColorRecord)
	{
		return;
	}

	modifiedUTeamColorRecord->m_id = arrayIndex;

	if (!GEditor)
	{
		return;
	}

	UEditorAssetSubsystem* editorAssetSubsystem = GEditor->GetEditorSubsystem<UEditorAssetSubsystem>();
	if (!editorAssetSubsystem)
	{
		return;
	}

	editorAssetSubsystem->SaveLoadedAsset(modifiedUTeamColorRecord, false);
	editorAssetSubsystem->SaveLoadedAsset(this, false);
}

void UTeamColorRecordDatabase::AddUTeamColorRecordToDatabase(UTeamColorRecord* record)
{
	const int32 arrayIndex = m_UTeamColorRecords.Num();
	m_UTeamColorRecords.Add(TSoftObjectPtr(record));

	record->m_id = arrayIndex;

	if (!GEditor)
	{
		return;
	}

	UEditorAssetSubsystem* editorAssetSubsystem = GEditor->GetEditorSubsystem<UEditorAssetSubsystem>();
	if (!editorAssetSubsystem)
	{
		return;
	}

	editorAssetSubsystem->SaveLoadedAsset(this, false);
}
#endif //WITH_EDITOR
