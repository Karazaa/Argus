// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#pragma once

#include "ArgusGameInstance.h"
#include "ArgusLogging.h"

#if WITH_EDITOR && !IS_PACKAGING_ARGUS
#include "Editor.h"
#include "Subsystems/EditorAssetSubsystem.h"
#endif //WITH_EDITOR && !IS_PACKAGING_ARGUS

class ArgusStaticData
{
public:
	template<typename ArgusStaticRecord>
	static const ArgusStaticRecord* GetRecord(uint32 id)
	{
		return nullptr;
	}

	template<typename ArgusStaticRecord>
	static const bool AsyncPreLoadRecord(uint32 id)
	{
		return false;
	}

#if WITH_EDITOR && !IS_PACKAGING_ARGUS
	static const uint32 AddRecordToDatabase(UArgusStaticRecord* record)
	{
		if (!GEditor)
		{
			return 0u;
		}

		UEditorAssetSubsystem* editorAssetSubsystem = GEditor->GetEditorSubsystem<UEditorAssetSubsystem>();
		const FString assetPath = FString(TEXT("/Game/StaticData/ArgusStaticDatabase.ArgusStaticDatabase"));
		UArgusStaticDatabase* staticDatabase = Cast<UArgusStaticDatabase>(editorAssetSubsystem->LoadAsset(assetPath));

		if (!staticDatabase)
		{
			return 0u;
		}
		
		if (UAbilityRecord* UAbilityRecordInstance = dynamic_cast<UAbilityRecord*>(record))
		{
			return staticDatabase->AddUAbilityRecordToDatabase(UAbilityRecordInstance);
		}
		if (UArgusActorRecord* UArgusActorRecordInstance = dynamic_cast<UArgusActorRecord*>(record))
		{
			return staticDatabase->AddUArgusActorRecordToDatabase(UArgusActorRecordInstance);
		}
		if (UFactionRecord* UFactionRecordInstance = dynamic_cast<UFactionRecord*>(record))
		{
			return staticDatabase->AddUFactionRecordToDatabase(UFactionRecordInstance);
		}
		if (UPlacedArgusActorTeamInfoRecord* UPlacedArgusActorTeamInfoRecordInstance = dynamic_cast<UPlacedArgusActorTeamInfoRecord*>(record))
		{
			return staticDatabase->AddUPlacedArgusActorTeamInfoRecordToDatabase(UPlacedArgusActorTeamInfoRecordInstance);
		}
		if (UResourceSetRecord* UResourceSetRecordInstance = dynamic_cast<UResourceSetRecord*>(record))
		{
			return staticDatabase->AddUResourceSetRecordToDatabase(UResourceSetRecordInstance);
		}
		if (UTeamColorRecord* UTeamColorRecordInstance = dynamic_cast<UTeamColorRecord*>(record))
		{
			return staticDatabase->AddUTeamColorRecordToDatabase(UTeamColorRecordInstance);
		}

		return 0u;
	}
#endif //WITH_EDITOR && !IS_PACKAGING_ARGUS

#pragma region UAbilityRecord
	template<>
	inline const UAbilityRecord* GetRecord(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_POINTER(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->GetUAbilityRecord(id);
	}

	template<>
	inline const bool AsyncPreLoadRecord<UAbilityRecord>(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_BOOL(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->AsyncPreLoadUAbilityRecord(id);
	}

#if WITH_EDITOR && !IS_PACKAGING_ARGUS
	static void RegisterNewUAbilityRecordDatabase(UAbilityRecordDatabase* database)
	{
		UArgusStaticDatabase* staticDatabase = GetParentDatabase();
		ARGUS_RETURN_ON_NULL(staticDatabase, ArgusStaticDataLog);
		staticDatabase->RegisterNewUAbilityRecordDatabase(database);
	}
#endif //WITH_EDITOR && !IS_PACKAGING_ARGUS
#pragma endregion

#pragma region UArgusActorRecord
	template<>
	inline const UArgusActorRecord* GetRecord(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_POINTER(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->GetUArgusActorRecord(id);
	}

	template<>
	inline const bool AsyncPreLoadRecord<UArgusActorRecord>(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_BOOL(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->AsyncPreLoadUArgusActorRecord(id);
	}

#if WITH_EDITOR && !IS_PACKAGING_ARGUS
	static void RegisterNewUArgusActorRecordDatabase(UArgusActorRecordDatabase* database)
	{
		UArgusStaticDatabase* staticDatabase = GetParentDatabase();
		ARGUS_RETURN_ON_NULL(staticDatabase, ArgusStaticDataLog);
		staticDatabase->RegisterNewUArgusActorRecordDatabase(database);
	}
#endif //WITH_EDITOR && !IS_PACKAGING_ARGUS
#pragma endregion

#pragma region UFactionRecord
	template<>
	inline const UFactionRecord* GetRecord(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_POINTER(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->GetUFactionRecord(id);
	}

	template<>
	inline const bool AsyncPreLoadRecord<UFactionRecord>(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_BOOL(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->AsyncPreLoadUFactionRecord(id);
	}

#if WITH_EDITOR && !IS_PACKAGING_ARGUS
	static void RegisterNewUFactionRecordDatabase(UFactionRecordDatabase* database)
	{
		UArgusStaticDatabase* staticDatabase = GetParentDatabase();
		ARGUS_RETURN_ON_NULL(staticDatabase, ArgusStaticDataLog);
		staticDatabase->RegisterNewUFactionRecordDatabase(database);
	}
#endif //WITH_EDITOR && !IS_PACKAGING_ARGUS
#pragma endregion

#pragma region UPlacedArgusActorTeamInfoRecord
	template<>
	inline const UPlacedArgusActorTeamInfoRecord* GetRecord(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_POINTER(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->GetUPlacedArgusActorTeamInfoRecord(id);
	}

	template<>
	inline const bool AsyncPreLoadRecord<UPlacedArgusActorTeamInfoRecord>(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_BOOL(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->AsyncPreLoadUPlacedArgusActorTeamInfoRecord(id);
	}

#if WITH_EDITOR && !IS_PACKAGING_ARGUS
	static void RegisterNewUPlacedArgusActorTeamInfoRecordDatabase(UPlacedArgusActorTeamInfoRecordDatabase* database)
	{
		UArgusStaticDatabase* staticDatabase = GetParentDatabase();
		ARGUS_RETURN_ON_NULL(staticDatabase, ArgusStaticDataLog);
		staticDatabase->RegisterNewUPlacedArgusActorTeamInfoRecordDatabase(database);
	}
#endif //WITH_EDITOR && !IS_PACKAGING_ARGUS
#pragma endregion

#pragma region UResourceSetRecord
	template<>
	inline const UResourceSetRecord* GetRecord(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_POINTER(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->GetUResourceSetRecord(id);
	}

	template<>
	inline const bool AsyncPreLoadRecord<UResourceSetRecord>(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_BOOL(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->AsyncPreLoadUResourceSetRecord(id);
	}

#if WITH_EDITOR && !IS_PACKAGING_ARGUS
	static void RegisterNewUResourceSetRecordDatabase(UResourceSetRecordDatabase* database)
	{
		UArgusStaticDatabase* staticDatabase = GetParentDatabase();
		ARGUS_RETURN_ON_NULL(staticDatabase, ArgusStaticDataLog);
		staticDatabase->RegisterNewUResourceSetRecordDatabase(database);
	}
#endif //WITH_EDITOR && !IS_PACKAGING_ARGUS
#pragma endregion

#pragma region UTeamColorRecord
	template<>
	inline const UTeamColorRecord* GetRecord(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_POINTER(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->GetUTeamColorRecord(id);
	}

	template<>
	inline const bool AsyncPreLoadRecord<UTeamColorRecord>(uint32 id)
	{
		UArgusStaticDatabase* staticDatabase = UArgusGameInstance::GetStaticDatabase();
		ARGUS_RETURN_ON_NULL_BOOL(staticDatabase, ArgusStaticDataLog);
		return staticDatabase->AsyncPreLoadUTeamColorRecord(id);
	}

#if WITH_EDITOR && !IS_PACKAGING_ARGUS
	static void RegisterNewUTeamColorRecordDatabase(UTeamColorRecordDatabase* database)
	{
		UArgusStaticDatabase* staticDatabase = GetParentDatabase();
		ARGUS_RETURN_ON_NULL(staticDatabase, ArgusStaticDataLog);
		staticDatabase->RegisterNewUTeamColorRecordDatabase(database);
	}
#endif //WITH_EDITOR && !IS_PACKAGING_ARGUS
#pragma endregion

#if WITH_EDITOR && !IS_PACKAGING_ARGUS
private:
	static UArgusStaticDatabase* GetParentDatabase()
	{
		if (!GEditor)
		{
			return nullptr;
		}

		UEditorAssetSubsystem* editorAssetSubsystem = GEditor->GetEditorSubsystem<UEditorAssetSubsystem>();
		if (!editorAssetSubsystem)
		{
			return nullptr;
		}

		return Cast<UArgusStaticDatabase>(editorAssetSubsystem->LoadAsset(FString("/Game/StaticData/ArgusStaticDatabase.ArgusStaticDatabase")));
	}
#endif //WITH_EDITOR && !IS_PACKAGING_ARGUS
};
