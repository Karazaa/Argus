// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#pragma once

#include "CoreMinimal.h"
#include "SoftPtrLoadStore.generated.h"

#pragma region UArgusEntityTemplate
class UArgusEntityTemplate;

USTRUCT(BlueprintType)
struct FSoftPtrLoadStore_UArgusEntityTemplate
{
	GENERATED_BODY()

public:
	UArgusEntityTemplate* LoadAndStorePtr() const;
	bool AsyncPreLoadAndStorePtr() const;
	void SetHardPtr(UArgusEntityTemplate* pointer);
	operator bool() const { return m_hardPtr || !m_softPtr.IsNull(); }

protected:
	UPROPERTY(EditAnywhere, BlueprintReadOnly)
	TSoftObjectPtr<UArgusEntityTemplate> m_softPtr = nullptr;

	UPROPERTY(Transient)
	mutable TObjectPtr<UArgusEntityTemplate> m_hardPtr = nullptr;
};
#pragma endregion

#pragma region UTexture
class UTexture;

USTRUCT(BlueprintType)
struct FSoftPtrLoadStore_UTexture
{
	GENERATED_BODY()

public:
	UTexture* LoadAndStorePtr() const;
	bool AsyncPreLoadAndStorePtr() const;
	void SetHardPtr(UTexture* pointer);
	operator bool() const { return m_hardPtr || !m_softPtr.IsNull(); }

protected:
	UPROPERTY(EditAnywhere, BlueprintReadOnly)
	TSoftObjectPtr<UTexture> m_softPtr = nullptr;

	UPROPERTY(Transient)
	mutable TObjectPtr<UTexture> m_hardPtr = nullptr;
};
#pragma endregion

#pragma region UMaterialInterface
class UMaterialInterface;

USTRUCT(BlueprintType)
struct FSoftPtrLoadStore_UMaterialInterface
{
	GENERATED_BODY()

public:
	UMaterialInterface* LoadAndStorePtr() const;
	bool AsyncPreLoadAndStorePtr() const;
	void SetHardPtr(UMaterialInterface* pointer);
	operator bool() const { return m_hardPtr || !m_softPtr.IsNull(); }

protected:
	UPROPERTY(EditAnywhere, BlueprintReadOnly)
	TSoftObjectPtr<UMaterialInterface> m_softPtr = nullptr;

	UPROPERTY(Transient)
	mutable TObjectPtr<UMaterialInterface> m_hardPtr = nullptr;
};
#pragma endregion
