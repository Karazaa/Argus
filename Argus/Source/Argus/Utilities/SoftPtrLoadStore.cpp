// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#pragma once

#include "SoftPtrLoadStore.h"
#include "ArgusEntity.h"
#include "ArgusLogging.h"
#include "ArgusEntityTemplate.h"
#include "Engine/Texture.h"
#include "Materials/MaterialInterface.h"

#pragma region UArgusEntityTemplate
	UArgusEntityTemplate* FSoftPtrLoadStore_UArgusEntityTemplate::LoadAndStorePtr() const
	{
		ARGUS_TRACE(FSoftPtrLoadStore_UArgusEntityTemplate::LoadAndStorePtr);

		if (m_hardPtr)
		{
			return m_hardPtr.Get();
		}

		if (m_softPtr.IsNull())
		{
			return nullptr;
		}

		m_hardPtr = m_softPtr.LoadSynchronous();
		return m_hardPtr.Get();
	}

	bool FSoftPtrLoadStore_UArgusEntityTemplate::AsyncPreLoadAndStorePtr() const
	{
		ARGUS_TRACE(FSoftPtrLoadStore_UArgusEntityTemplate::AsyncPreLoadAndStorePtr);

		if (m_hardPtr || m_softPtr.IsNull())
		{
			return true;
		}

		AssetLoadingComponent* assetLoadingComponent = ArgusEntity::GetSingletonEntity().GetComponent<AssetLoadingComponent>();
		ARGUS_RETURN_ON_NULL_BOOL(assetLoadingComponent, ArgusStaticDataLog);

		assetLoadingComponent->m_streamableManager.RequestAsyncLoad(m_softPtr.ToSoftObjectPath(), FStreamableDelegate::CreateLambda
		(
			[this]()
			{
				m_hardPtr = m_softPtr.Get();
			})
		);

		return true;
	}

	void FSoftPtrLoadStore_UArgusEntityTemplate::SetHardPtr(UArgusEntityTemplate* pointer)
	{
		m_hardPtr = pointer;
	};
#pragma endregion

#pragma region UTexture
	UTexture* FSoftPtrLoadStore_UTexture::LoadAndStorePtr() const
	{
		ARGUS_TRACE(FSoftPtrLoadStore_UTexture::LoadAndStorePtr);

		if (m_hardPtr)
		{
			return m_hardPtr.Get();
		}

		if (m_softPtr.IsNull())
		{
			return nullptr;
		}

		m_hardPtr = m_softPtr.LoadSynchronous();
		return m_hardPtr.Get();
	}

	bool FSoftPtrLoadStore_UTexture::AsyncPreLoadAndStorePtr() const
	{
		ARGUS_TRACE(FSoftPtrLoadStore_UTexture::AsyncPreLoadAndStorePtr);

		if (m_hardPtr || m_softPtr.IsNull())
		{
			return true;
		}

		AssetLoadingComponent* assetLoadingComponent = ArgusEntity::GetSingletonEntity().GetComponent<AssetLoadingComponent>();
		ARGUS_RETURN_ON_NULL_BOOL(assetLoadingComponent, ArgusStaticDataLog);

		assetLoadingComponent->m_streamableManager.RequestAsyncLoad(m_softPtr.ToSoftObjectPath(), FStreamableDelegate::CreateLambda
		(
			[this]()
			{
				m_hardPtr = m_softPtr.Get();
			})
		);

		return true;
	}

	void FSoftPtrLoadStore_UTexture::SetHardPtr(UTexture* pointer)
	{
		m_hardPtr = pointer;
	};
#pragma endregion

#pragma region UMaterialInterface
	UMaterialInterface* FSoftPtrLoadStore_UMaterialInterface::LoadAndStorePtr() const
	{
		ARGUS_TRACE(FSoftPtrLoadStore_UMaterialInterface::LoadAndStorePtr);

		if (m_hardPtr)
		{
			return m_hardPtr.Get();
		}

		if (m_softPtr.IsNull())
		{
			return nullptr;
		}

		m_hardPtr = m_softPtr.LoadSynchronous();
		return m_hardPtr.Get();
	}

	bool FSoftPtrLoadStore_UMaterialInterface::AsyncPreLoadAndStorePtr() const
	{
		ARGUS_TRACE(FSoftPtrLoadStore_UMaterialInterface::AsyncPreLoadAndStorePtr);

		if (m_hardPtr || m_softPtr.IsNull())
		{
			return true;
		}

		AssetLoadingComponent* assetLoadingComponent = ArgusEntity::GetSingletonEntity().GetComponent<AssetLoadingComponent>();
		ARGUS_RETURN_ON_NULL_BOOL(assetLoadingComponent, ArgusStaticDataLog);

		assetLoadingComponent->m_streamableManager.RequestAsyncLoad(m_softPtr.ToSoftObjectPath(), FStreamableDelegate::CreateLambda
		(
			[this]()
			{
				m_hardPtr = m_softPtr.Get();
			})
		);

		return true;
	}

	void FSoftPtrLoadStore_UMaterialInterface::SetHardPtr(UMaterialInterface* pointer)
	{
		m_hardPtr = pointer;
	};
#pragma endregion
