// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "DynamicAllocComponentDefinitions/FogOfWarComponent.h"
#include "ArgusEntity.h"
#include "ArgusLogging.h"

#if !UE_BUILD_SHIPPING
#include "ArgusStaticData.h"
#include "imgui.h"
#include "UObject/ReflectedTypeAccessors.h"
#endif //!UE_BUILD_SHIPPING

// Component shared functionality
void FogOfWarComponent::Reset()
{
	m_fogOfWarTexture = nullptr;
	m_dynamicMaterialInstance = nullptr;
	m_textureData.Reset();
	m_blurredTextureData.Reset();
	m_smoothedTextureData.Reset();
	m_intermediarySmoothingData.Reset();
	m_gaussianFilter.Reset();
	m_gaussianDimension = 5u;
	m_revealedOnceAlpha = 100u;
	m_blurPassCount = 3u;
	m_useBlurring = true;
	m_smoothingDecayConstant = 5.0f;
	m_textureSize = 1024u;
}

void FogOfWarComponent::DrawComponentDebug() const
{
#if !UE_BUILD_SHIPPING
	if (!ImGui::CollapsingHeader("FogOfWarComponent"))
	{
		return;
	}

	if (ImGui::BeginTable("ComponentValues", 2, ImGuiTableFlags_NoSavedSettings))
	{
		ImGui::TableNextColumn();
		ImGui::Text("m_fogOfWarTexture");
		ImGui::TableNextColumn();
		ImGui::TableNextColumn();
		ImGui::Text("m_dynamicMaterialInstance");
		ImGui::TableNextColumn();
		ImGui::TableNextColumn();
		ImGui::Text("m_textureRegion");
		ImGui::TableNextColumn();
		ImGui::TableNextColumn();
		ImGui::Text("m_textureRegionsUpdateData");
		ImGui::TableNextColumn();
		ImGui::TableNextColumn();
		ImGui::Text("m_textureData");
		ImGui::TableNextColumn();
		ImGui::Text("Array max is currently = %d", m_textureData.Max());
		if (m_textureData.Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_textureData.Num());
			for (int32 i = 0; i < m_textureData.Num(); ++i)
			{
				ImGui::Text("%d", m_textureData[i]);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_blurredTextureData");
		ImGui::TableNextColumn();
		ImGui::Text("Array max is currently = %d", m_blurredTextureData.Max());
		if (m_blurredTextureData.Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_blurredTextureData.Num());
			for (int32 i = 0; i < m_blurredTextureData.Num(); ++i)
			{
				ImGui::Text("%d", m_blurredTextureData[i]);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_smoothedTextureData");
		ImGui::TableNextColumn();
		ImGui::Text("Array max is currently = %d", m_smoothedTextureData.Max());
		if (m_smoothedTextureData.Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_smoothedTextureData.Num());
			for (int32 i = 0; i < m_smoothedTextureData.Num(); ++i)
			{
				ImGui::Text("%d", m_smoothedTextureData[i]);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_intermediarySmoothingData");
		ImGui::TableNextColumn();
		ImGui::Text("Array max is currently = %d", m_intermediarySmoothingData.Max());
		if (m_intermediarySmoothingData.Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_intermediarySmoothingData.Num());
			for (int32 i = 0; i < m_intermediarySmoothingData.Num(); ++i)
			{
				ImGui::Text("%.2f", m_intermediarySmoothingData[i]);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_gaussianFilter");
		ImGui::TableNextColumn();
		ImGui::Text("Array max is currently = %d", m_gaussianFilter.Max());
		if (m_gaussianFilter.Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_gaussianFilter.Num());
			for (int32 i = 0; i < m_gaussianFilter.Num(); ++i)
			{
				ImGui::Text("%.2f", m_gaussianFilter[i]);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_gaussianDimension");
		ImGui::TableNextColumn();
		ImGui::Text("%d", m_gaussianDimension);
		ImGui::TableNextColumn();
		ImGui::Text("m_revealedOnceAlpha");
		ImGui::TableNextColumn();
		ImGui::Text("%d", m_revealedOnceAlpha);
		ImGui::TableNextColumn();
		ImGui::Text("m_blurPassCount");
		ImGui::TableNextColumn();
		ImGui::Text("%d", m_blurPassCount);
		ImGui::TableNextColumn();
		ImGui::Text("m_useBlurring");
		ImGui::TableNextColumn();
		ImGui::Text(m_useBlurring ? "true" : "false");
		ImGui::TableNextColumn();
		ImGui::Text("m_smoothingDecayConstant");
		ImGui::TableNextColumn();
		ImGui::Text("%.2f", m_smoothingDecayConstant);
		ImGui::TableNextColumn();
		ImGui::Text("m_textureSize");
		ImGui::TableNextColumn();
		ImGui::Text("%d", m_textureSize);
		ImGui::EndTable();
	}
#endif //!UE_BUILD_SHIPPING
}
