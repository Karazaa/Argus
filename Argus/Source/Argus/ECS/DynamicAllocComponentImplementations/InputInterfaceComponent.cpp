// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "DynamicAllocComponentDefinitions/InputInterfaceComponent.h"
#include "ArgusEntity.h"
#include "ArgusLogging.h"

#if !UE_BUILD_SHIPPING
#include "ArgusStaticData.h"
#include "imgui.h"
#include "UObject/ReflectedTypeAccessors.h"
#endif //!UE_BUILD_SHIPPING

// Component shared functionality
void InputInterfaceComponent::DrawComponentDebug() const
{
#if !UE_BUILD_SHIPPING
	if (!ImGui::CollapsingHeader("InputInterfaceComponent"))
	{
		return;
	}

	if (ImGui::BeginTable("ComponentValues", 2, ImGuiTableFlags_NoSavedSettings))
	{
		ImGui::TableNextColumn();
		ImGui::Text("m_selectedArgusEntityIds");
		ImGui::TableNextColumn();
		ImGui::Text("Array max is currently = %d", m_selectedArgusEntityIds.Max());
		if (m_selectedArgusEntityIds.Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_selectedArgusEntityIds.Num());
			for (int32 i = 0; i < m_selectedArgusEntityIds.Num(); ++i)
			{
				ImGui::Text("%d", m_selectedArgusEntityIds[i]);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_activeAbilityGroupArgusEntityIds");
		ImGui::TableNextColumn();
		ImGui::Text("Array max is currently = %d", m_activeAbilityGroupArgusEntityIds.Max());
		if (m_activeAbilityGroupArgusEntityIds.Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_activeAbilityGroupArgusEntityIds.Num());
			for (int32 i = 0; i < m_activeAbilityGroupArgusEntityIds.Num(); ++i)
			{
				ImGui::Text("%d", m_activeAbilityGroupArgusEntityIds[i]);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_selectedActorsDisplayState");
		ImGui::TableNextColumn();
		const char* valueName_m_selectedActorsDisplayState = ARGUS_FSTRING_TO_CHAR(StaticEnum<ESelectedActorsDisplayState>()->GetNameStringByValue(static_cast<uint8>(m_selectedActorsDisplayState)))
		ImGui::Text(valueName_m_selectedActorsDisplayState);
		ImGui::TableNextColumn();
		ImGui::Text("m_indexOfActiveAbilityGroup");
		ImGui::TableNextColumn();
		ImGui::Text("%d", m_indexOfActiveAbilityGroup);
		ImGui::EndTable();
	}
#endif //!UE_BUILD_SHIPPING
}
