// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "ComponentDefinitions/ResourceComponent.h"
#include "ArgusEntity.h"
#include "ArgusLogging.h"

#if !UE_BUILD_SHIPPING
#include "ArgusStaticData.h"
#include "imgui.h"
#include "UObject/ReflectedTypeAccessors.h"
#endif //!UE_BUILD_SHIPPING

// Component shared functionality
uint16 ResourceComponent::GetOwningEntityId() const
{
	return this - &ArgusComponentRegistry::s_ResourceComponents[0];
}

void ResourceComponent::DrawComponentDebug() const
{
#if !UE_BUILD_SHIPPING
	if (!ImGui::CollapsingHeader("ResourceComponent"))
	{
		return;
	}

	if (ImGui::BeginTable("ComponentValues", 2, ImGuiTableFlags_NoSavedSettings))
	{
		ImGui::TableNextColumn();
		ImGui::Text("m_currentResources");
		ImGui::TableNextColumn();
		const uint8 m_currentResources_numResources = static_cast<uint8>(EResourceType::Count);
		for (int32 i = 0; i < m_currentResources_numResources; ++i)
		{
			ImGui::SameLine();
			ImGui::Text("%d ", m_currentResources.m_resourceQuantities[i]);
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_resourceCapacityRecordId");
		ImGui::TableNextColumn();
		if (m_resourceCapacityRecordId != 0u)
		{
			if (const UResourceSetRecord* record_m_resourceCapacityRecordId = ArgusStaticData::GetRecord<UResourceSetRecord>(m_resourceCapacityRecordId))
			{
				const char* name_m_resourceCapacityRecordId = ARGUS_FSTRING_TO_CHAR(record_m_resourceCapacityRecordId->GetName());
				ImGui::Text("%s", name_m_resourceCapacityRecordId);
			}
		}
		else
		{
			ImGui::Text("None", m_resourceCapacityRecordId);
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_resourceComponentOwnerType");
		ImGui::TableNextColumn();
		const char* valueName_m_resourceComponentOwnerType = ARGUS_FSTRING_TO_CHAR(StaticEnum<EResourceComponentOwnerType>()->GetNameStringByValue(static_cast<uint8>(m_resourceComponentOwnerType)))
		ImGui::Text(valueName_m_resourceComponentOwnerType);
		ImGui::EndTable();
	}
#endif //!UE_BUILD_SHIPPING
}

// Per observable logic
