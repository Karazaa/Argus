// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "ComponentDefinitions/NavigationComponent.h"
#include "ArgusEntity.h"
#include "ArgusLogging.h"

#if !UE_BUILD_SHIPPING
#include "ArgusStaticData.h"
#include "imgui.h"
#include "UObject/ReflectedTypeAccessors.h"
#endif //!UE_BUILD_SHIPPING

// Component shared functionality
uint16 NavigationComponent::GetOwningEntityId() const
{
	return this - &ArgusComponentRegistry::s_NavigationComponents[0];
}

void NavigationComponent::DrawComponentDebug() const
{
#if !UE_BUILD_SHIPPING
	if (!ImGui::CollapsingHeader("NavigationComponent"))
	{
		return;
	}

	if (ImGui::BeginTable("ComponentValues", 2, ImGuiTableFlags_NoSavedSettings))
	{
		ImGui::TableNextColumn();
		ImGui::Text("m_navigationPoints");
		ImGui::TableNextColumn();
		ImGui::Text("Array max is currently = %d", m_navigationPoints.Max());
		if (m_navigationPoints.Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_navigationPoints.Num());
			for (int32 i = 0; i < m_navigationPoints.Num(); ++i)
			{
				ImGui::Text("(%.2f, %.2f, %.2f)", m_navigationPoints[i].X, m_navigationPoints[i].Y, m_navigationPoints[i].Z);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_queuedWaypoints");
		ImGui::TableNextColumn();
		if (m_queuedWaypoints.IsEmpty())
		{
			ImGui::Text("Deque is empty");
		}
		else
		{
			for (auto element : m_queuedWaypoints)
			{
				ImGui::Text("(%.2f, %.2f, %.2f)", element.X, element.Y, element.Z);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_lastPointIndex");
		ImGui::TableNextColumn();
		ImGui::Text("%d", m_lastPointIndex);
		ImGui::EndTable();
	}
#endif //!UE_BUILD_SHIPPING
}

// Per observable logic
