// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "ComponentDefinitions/FlockingComponent.h"
#include "ArgusEntity.h"
#include "ArgusLogging.h"

#if !UE_BUILD_SHIPPING
#include "ArgusStaticData.h"
#include "imgui.h"
#include "UObject/ReflectedTypeAccessors.h"
#endif //!UE_BUILD_SHIPPING

// Component shared functionality
uint16 FlockingComponent::GetOwningEntityId() const
{
	return this - &ArgusComponentRegistry::s_FlockingComponents[0];
}

void FlockingComponent::Reset()
{
	m_flockingState = EFlockingState::Stable;
	m_flockingRootId = ArgusECSConstants::k_maxEntities;
	m_numEntitiesInStableRange = 0u;
	m_flockingStableRange = 100.0f;
	m_minDistanceFromFlockingPoint = FLT_MAX;
	m_timeAtMinFlockingDistance = 0.0f;
}

void FlockingComponent::DrawComponentDebug() const
{
#if !UE_BUILD_SHIPPING
	if (!ImGui::CollapsingHeader("FlockingComponent"))
	{
		return;
	}

	if (ImGui::BeginTable("ComponentValues", 2, ImGuiTableFlags_NoSavedSettings))
	{
		ImGui::TableNextColumn();
		ImGui::Text("m_flockingState");
		ImGui::TableNextColumn();
		const char* valueName_m_flockingState = ARGUS_FSTRING_TO_CHAR(StaticEnum<EFlockingState>()->GetNameStringByValue(static_cast<uint8>(m_flockingState)))
		ImGui::Text(valueName_m_flockingState);
		ImGui::TableNextColumn();
		ImGui::Text("m_flockingRootId");
		ImGui::TableNextColumn();
		ImGui::Text("%d", m_flockingRootId);
		ImGui::TableNextColumn();
		ImGui::Text("m_numEntitiesInStableRange");
		ImGui::TableNextColumn();
		ImGui::Text("%d", m_numEntitiesInStableRange);
		ImGui::TableNextColumn();
		ImGui::Text("m_flockingStableRange");
		ImGui::TableNextColumn();
		ImGui::Text("%.2f", m_flockingStableRange);
		ImGui::TableNextColumn();
		ImGui::Text("m_minDistanceFromFlockingPoint");
		ImGui::TableNextColumn();
		ImGui::Text("%.2f", m_minDistanceFromFlockingPoint);
		ImGui::TableNextColumn();
		ImGui::Text("m_timeAtMinFlockingDistance");
		ImGui::TableNextColumn();
		ImGui::Text("%.2f", m_timeAtMinFlockingDistance);
		ImGui::EndTable();
	}
#endif //!UE_BUILD_SHIPPING
}

// Per observable logic
