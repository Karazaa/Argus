// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "ComponentDefinitions/NearbyEntitiesComponent.h"
#include "ArgusEntity.h"
#include "ArgusLogging.h"

#if !UE_BUILD_SHIPPING
#include "ArgusStaticData.h"
#include "imgui.h"
#include "UObject/ReflectedTypeAccessors.h"
#endif //!UE_BUILD_SHIPPING

// Component shared functionality
uint16 NearbyEntitiesComponent::GetOwningEntityId() const
{
	return this - &ArgusComponentRegistry::s_NearbyEntitiesComponents[0];
}

void NearbyEntitiesComponent::DrawComponentDebug() const
{
#if !UE_BUILD_SHIPPING
	if (!ImGui::CollapsingHeader("NearbyEntitiesComponent"))
	{
		return;
	}

	if (ImGui::BeginTable("ComponentValues", 2, ImGuiTableFlags_NoSavedSettings))
	{
		ImGui::TableNextColumn();
		ImGui::Text("m_nearbyEntities.GetEntityIdsInAvoidanceRange()");
		ImGui::TableNextColumn();
		if (m_nearbyEntities.GetEntityIdsInAvoidanceRange().Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_nearbyEntities.GetEntityIdsInAvoidanceRange().Num());
			for (int32 i = 0; i < m_nearbyEntities.GetEntityIdsInAvoidanceRange().Num(); ++i)
			{
				ImGui::Text("%d", m_nearbyEntities.GetEntityIdsInAvoidanceRange()[i]);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_nearbyEntities.GetEntityIdsInFlockingRange()");
		ImGui::TableNextColumn();
		if (m_nearbyEntities.GetEntityIdsInFlockingRange().Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_nearbyEntities.GetEntityIdsInFlockingRange().Num());
			for (int32 i = 0; i < m_nearbyEntities.GetEntityIdsInFlockingRange().Num(); ++i)
			{
				ImGui::Text("%d", m_nearbyEntities.GetEntityIdsInFlockingRange()[i]);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_nearbyEntities.GetEntityIdsInSightRange()");
		ImGui::TableNextColumn();
		if (m_nearbyEntities.GetEntityIdsInSightRange().Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_nearbyEntities.GetEntityIdsInSightRange().Num());
			for (int32 i = 0; i < m_nearbyEntities.GetEntityIdsInSightRange().Num(); ++i)
			{
				ImGui::Text("%d", m_nearbyEntities.GetEntityIdsInSightRange()[i]);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_nearbyEntities.GetEntityIdsInRangedRange()");
		ImGui::TableNextColumn();
		if (m_nearbyEntities.GetEntityIdsInRangedRange().Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_nearbyEntities.GetEntityIdsInRangedRange().Num());
			for (int32 i = 0; i < m_nearbyEntities.GetEntityIdsInRangedRange().Num(); ++i)
			{
				ImGui::Text("%d", m_nearbyEntities.GetEntityIdsInRangedRange()[i]);
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_nearbyEntities.GetEntityIdsInMeleeRange()");
		ImGui::TableNextColumn();
		if (m_nearbyEntities.GetEntityIdsInMeleeRange().Num() == 0)
		{
			ImGui::Text("Array is empty");
		}
		else
		{
			ImGui::Text("Size of array = %d", m_nearbyEntities.GetEntityIdsInMeleeRange().Num());
			for (int32 i = 0; i < m_nearbyEntities.GetEntityIdsInMeleeRange().Num(); ++i)
			{
				ImGui::Text("%d", m_nearbyEntities.GetEntityIdsInMeleeRange()[i]);
			}
		}
		ImGui::EndTable();
	}
#endif //!UE_BUILD_SHIPPING
}

// Per observable logic
