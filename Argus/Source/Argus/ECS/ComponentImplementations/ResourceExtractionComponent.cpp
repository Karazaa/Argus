// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "ComponentDefinitions/ResourceExtractionComponent.h"
#include "ArgusEntity.h"

#if !UE_BUILD_SHIPPING
#include "ArgusStaticData.h"
#include "imgui.h"
#include "UObject/ReflectedTypeAccessors.h"
#endif //!UE_BUILD_SHIPPING

// Component shared functionality
uint16 ResourceExtractionComponent::GetOwningEntityId() const
{
	return this - &ArgusComponentRegistry::s_ResourceExtractionComponents[0];
}

void ResourceExtractionComponent::DrawComponentDebug() const
{
#if !UE_BUILD_SHIPPING
	if (!ImGui::CollapsingHeader("ResourceExtractionComponent"))
	{
		return;
	}

	if (ImGui::BeginTable("ComponentValues", 2, ImGuiTableFlags_NoSavedSettings))
	{
		ImGui::TableNextColumn();
		ImGui::Text("m_resourcesToExtract");
		ImGui::TableNextColumn();
		const uint8 m_resourcesToExtract_numResources = static_cast<uint8>(EResourceType::Count);
		for (int32 i = 0; i < m_resourcesToExtract_numResources; ++i)
		{
			ImGui::SameLine();
			ImGui::Text("%d ", m_resourcesToExtract.m_resourceQuantities[i]);
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_extractionLengthSeconds");
		ImGui::TableNextColumn();
		ImGui::Text("%.2f", m_extractionLengthSeconds);
		ImGui::TableNextColumn();
		ImGui::Text("m_resourceExtractionTimer");
		ImGui::TableNextColumn();
		const ArgusEntity owningEntity = ArgusEntity::RetrieveEntity(GetOwningEntityId());
		if (m_resourceExtractionTimer.IsTimerTicking(owningEntity))
		{
			ImGui::Text("%.2f", m_resourceExtractionTimer.GetTimeRemaining(owningEntity));
			ImGui::SameLine();
			ImGui::ProgressBar(m_resourceExtractionTimer.GetTimeElapsedProportion(owningEntity));
		}
		else if (m_resourceExtractionTimer.IsTimerComplete(owningEntity))
		{
			ImGui::Text("Timer complete");
		}
		else
		{
			ImGui::Text("Not set");
		}
		ImGui::EndTable();
	}
#endif //!UE_BUILD_SHIPPING
}

// Per observable logic
