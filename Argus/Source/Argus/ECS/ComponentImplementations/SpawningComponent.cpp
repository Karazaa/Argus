// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "ComponentDefinitions/SpawningComponent.h"
#include "ArgusEntity.h"
#include "ArgusLogging.h"

#if !UE_BUILD_SHIPPING
#include "ArgusStaticData.h"
#include "imgui.h"
#include "UObject/ReflectedTypeAccessors.h"
#endif //!UE_BUILD_SHIPPING

// Component shared functionality
uint16 SpawningComponent::GetOwningEntityId() const
{
	return this - &ArgusComponentRegistry::s_SpawningComponents[0];
}

void SpawningComponent::Reset()
{
	m_spawnQueue.Reset();
	m_spawningRadius = 100.0f;
	m_maximumQueueSize = 10u;
	m_currentQueueSize = 0u;
}

void SpawningComponent::DrawComponentDebug() const
{
#if !UE_BUILD_SHIPPING
	if (!ImGui::CollapsingHeader("SpawningComponent"))
	{
		return;
	}

	if (ImGui::BeginTable("ComponentValues", 2, ImGuiTableFlags_NoSavedSettings))
	{
		ImGui::TableNextColumn();
		ImGui::Text("m_spawnQueue");
		ImGui::TableNextColumn();
		if (m_spawnQueue.IsEmpty())
		{
			ImGui::Text("Deque is empty");
		}
		else
		{
			for (auto element : m_spawnQueue)
			{
				if (element.m_argusActorRecordId != 0u)
				{
					if (const UArgusActorRecord* record_m_argusActorRecordId = ArgusStaticData::GetRecord<UArgusActorRecord>(element.m_argusActorRecordId))
					{
						const char* name_m_argusActorRecordId = ARGUS_FSTRING_TO_CHAR(record_m_argusActorRecordId->GetName());
						ImGui::Text("%s", name_m_argusActorRecordId);
					}
				}
				else
				{
					ImGui::Text("None");
				}
			}
		}
		ImGui::TableNextColumn();
		ImGui::Text("m_spawningRadius");
		ImGui::TableNextColumn();
		ImGui::Text("%.2f", m_spawningRadius);
		ImGui::TableNextColumn();
		ImGui::Text("m_maximumQueueSize");
		ImGui::TableNextColumn();
		ImGui::Text("%d", m_maximumQueueSize);
		ImGui::TableNextColumn();
		ImGui::Text("m_currentQueueSize");
		ImGui::TableNextColumn();
		ImGui::Text("%d", m_currentQueueSize);
		ImGui::TableNextColumn();
		ImGui::Text("m_spawnTimerHandle");
		ImGui::TableNextColumn();
		const ArgusEntity owningEntity = ArgusEntity::RetrieveEntity(GetOwningEntityId());
		if (m_spawnTimerHandle.IsTimerTicking(owningEntity))
		{
			ImGui::Text("%.2f", m_spawnTimerHandle.GetTimeRemaining(owningEntity));
			ImGui::SameLine();
			ImGui::ProgressBar(m_spawnTimerHandle.GetTimeElapsedProportion(owningEntity));
		}
		else if (m_spawnTimerHandle.IsTimerComplete(owningEntity))
		{
			ImGui::Text("Timer complete");
		}
		else
		{
			ImGui::Text("Not set");
		}
		ImGui::EndTable();
	}
#endif //!UE_BUILD_SHIPPING
}

// Per observable logic
