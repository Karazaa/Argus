// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#pragma once

#include "ArgusContainerAllocator.h"
#include "CoreMinimal.h"
#include "ComponentDependencies/TaskComponentStates.h"

class IAbilityComponentObserver
{
public:
	virtual void OnChanged_m_abilityOverrideBitmask(uint8 oldValue, uint8 newValue) = 0;
};

class AbilityComponentObservers
{
private:
	TArray<IAbilityComponentObserver*, ArgusContainerAllocator<2> > m_AbilityComponentObservers;

public:
	void AddObserver(IAbilityComponentObserver* observer)
	{
		if (!observer)
		{
			return;
		}

		m_AbilityComponentObservers.Add(observer);
	}

	void RemoveObserver(IAbilityComponentObserver* observer)
	{
		if (!observer)
		{
			return;
		}

		m_AbilityComponentObservers.RemoveAll
		(
			[observer] (IAbilityComponentObserver* other)
			{
				return other == observer;
			}
		);
	}

	void Reset()
	{
		m_AbilityComponentObservers.Reset();
	}

private:
	void OnChanged_m_abilityOverrideBitmask(uint8 oldValue, uint8 newValue)
	{
		for (int32 i = 0; i < m_AbilityComponentObservers.Num(); ++i)
		{
			m_AbilityComponentObservers[i]->OnChanged_m_abilityOverrideBitmask(oldValue, newValue);
		}
	};

	friend struct AbilityComponent;
};
