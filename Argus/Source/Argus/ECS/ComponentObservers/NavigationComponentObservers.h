// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#pragma once

#include "ArgusContainerAllocator.h"
#include "CoreMinimal.h"
#include "ComponentDependencies/TaskComponentStates.h"

class INavigationComponentObserver
{
public:
};

class NavigationComponentObservers
{
private:
	TArray<INavigationComponentObserver*, ArgusContainerAllocator<2> > m_NavigationComponentObservers;

public:
	void AddObserver(INavigationComponentObserver* observer)
	{
		if (!observer)
		{
			return;
		}

		m_NavigationComponentObservers.Add(observer);
	}

	void RemoveObserver(INavigationComponentObserver* observer)
	{
		if (!observer)
		{
			return;
		}

		m_NavigationComponentObservers.RemoveAll
		(
			[observer] (INavigationComponentObserver* other)
			{
				return other == observer;
			}
		);
	}

	void Reset()
	{
		m_NavigationComponentObservers.Reset();
	}

private:

	friend struct NavigationComponent;
};
