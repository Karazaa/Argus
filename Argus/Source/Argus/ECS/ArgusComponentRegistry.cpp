// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "ArgusComponentRegistry.h"

// Begin component specific definitions
#pragma region AbilityComponent
AbilityComponent ArgusComponentRegistry::s_AbilityComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isAbilityComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region AvoidanceGroupingComponent
AvoidanceGroupingComponent ArgusComponentRegistry::s_AvoidanceGroupingComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isAvoidanceGroupingComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region CarrierComponent
CarrierComponent ArgusComponentRegistry::s_CarrierComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isCarrierComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region CombatComponent
CombatComponent ArgusComponentRegistry::s_CombatComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isCombatComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region ConstructionComponent
ConstructionComponent ArgusComponentRegistry::s_ConstructionComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isConstructionComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region HealthComponent
HealthComponent ArgusComponentRegistry::s_HealthComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isHealthComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region IdentityComponent
IdentityComponent ArgusComponentRegistry::s_IdentityComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isIdentityComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region NavigationComponent
NavigationComponent ArgusComponentRegistry::s_NavigationComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isNavigationComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region NearbyEntitiesComponent
NearbyEntitiesComponent ArgusComponentRegistry::s_NearbyEntitiesComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isNearbyEntitiesComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region ObserversComponent
ObserversComponent ArgusComponentRegistry::s_ObserversComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isObserversComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region PassengerComponent
PassengerComponent ArgusComponentRegistry::s_PassengerComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isPassengerComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region ResourceComponent
ResourceComponent ArgusComponentRegistry::s_ResourceComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isResourceComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region ResourceExtractionComponent
ResourceExtractionComponent ArgusComponentRegistry::s_ResourceExtractionComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isResourceExtractionComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region SpawningComponent
SpawningComponent ArgusComponentRegistry::s_SpawningComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isSpawningComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region TargetingComponent
TargetingComponent ArgusComponentRegistry::s_TargetingComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isTargetingComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region TaskComponent
TaskComponent ArgusComponentRegistry::s_TaskComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isTaskComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region TimerComponent
TimerComponent ArgusComponentRegistry::s_TimerComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isTimerComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region TransformComponent
TransformComponent ArgusComponentRegistry::s_TransformComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isTransformComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region VelocityComponent
VelocityComponent ArgusComponentRegistry::s_VelocityComponents[ArgusECSConstants::k_maxEntities];
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isVelocityComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region InputInterfaceComponent
std::unordered_map<uint16, InputInterfaceComponent> ArgusComponentRegistry::s_InputInterfaceComponents;
#pragma endregion
#pragma region ReticleComponent
std::unordered_map<uint16, ReticleComponent> ArgusComponentRegistry::s_ReticleComponents;
#pragma endregion
#pragma region SpatialPartitioningComponent
std::unordered_map<uint16, SpatialPartitioningComponent> ArgusComponentRegistry::s_SpatialPartitioningComponents;
#pragma endregion

void ArgusComponentRegistry::RemoveComponentsForEntity(uint16 entityId)
{
	if (entityId >= ArgusECSConstants::k_maxEntities)
	{
		ARGUS_LOG(ArgusECSLog, Error, TEXT("[%s] Invalid entity id %d."), ARGUS_FUNCNAME, entityId);
		return;
	}

	// Begin set bitset bits to false
	s_isAbilityComponentActive.set(entityId, false);
	s_isAvoidanceGroupingComponentActive.set(entityId, false);
	s_isCarrierComponentActive.set(entityId, false);
	s_isCombatComponentActive.set(entityId, false);
	s_isConstructionComponentActive.set(entityId, false);
	s_isHealthComponentActive.set(entityId, false);
	s_isIdentityComponentActive.set(entityId, false);
	s_isNavigationComponentActive.set(entityId, false);
	s_isNearbyEntitiesComponentActive.set(entityId, false);
	s_isObserversComponentActive.set(entityId, false);
	s_isPassengerComponentActive.set(entityId, false);
	s_isResourceComponentActive.set(entityId, false);
	s_isResourceExtractionComponentActive.set(entityId, false);
	s_isSpawningComponentActive.set(entityId, false);
	s_isTargetingComponentActive.set(entityId, false);
	s_isTaskComponentActive.set(entityId, false);
	s_isTimerComponentActive.set(entityId, false);
	s_isTransformComponentActive.set(entityId, false);
	s_isVelocityComponentActive.set(entityId, false);

	// Begin set component values
	s_AbilityComponents[entityId] = AbilityComponent();
	s_AvoidanceGroupingComponents[entityId] = AvoidanceGroupingComponent();
	s_CarrierComponents[entityId] = CarrierComponent();
	s_CombatComponents[entityId] = CombatComponent();
	s_ConstructionComponents[entityId] = ConstructionComponent();
	s_HealthComponents[entityId] = HealthComponent();
	s_IdentityComponents[entityId] = IdentityComponent();
	s_NavigationComponents[entityId] = NavigationComponent();
	s_NearbyEntitiesComponents[entityId] = NearbyEntitiesComponent();
	s_ObserversComponents[entityId] = ObserversComponent();
	s_PassengerComponents[entityId] = PassengerComponent();
	s_ResourceComponents[entityId] = ResourceComponent();
	s_ResourceExtractionComponents[entityId] = ResourceExtractionComponent();
	s_SpawningComponents[entityId] = SpawningComponent();
	s_TargetingComponents[entityId] = TargetingComponent();
	s_TaskComponents[entityId] = TaskComponent();
	s_TimerComponents[entityId] = TimerComponent();
	s_TransformComponents[entityId] = TransformComponent();
	s_VelocityComponents[entityId] = VelocityComponent();

	// Begin remove dynamically allocated components
	if (s_InputInterfaceComponents.contains(entityId))
	{
		s_InputInterfaceComponents.erase(entityId);
	}
	if (s_ReticleComponents.contains(entityId))
	{
		s_ReticleComponents.erase(entityId);
	}
	if (s_SpatialPartitioningComponents.contains(entityId))
	{
		s_SpatialPartitioningComponents.erase(entityId);
	}
}

void ArgusComponentRegistry::FlushAllComponents()
{
	// Begin flush active component bitsets
	s_isAbilityComponentActive.reset();
	s_isAvoidanceGroupingComponentActive.reset();
	s_isCarrierComponentActive.reset();
	s_isCombatComponentActive.reset();
	s_isConstructionComponentActive.reset();
	s_isHealthComponentActive.reset();
	s_isIdentityComponentActive.reset();
	s_isNavigationComponentActive.reset();
	s_isNearbyEntitiesComponentActive.reset();
	s_isObserversComponentActive.reset();
	s_isPassengerComponentActive.reset();
	s_isResourceComponentActive.reset();
	s_isResourceExtractionComponentActive.reset();
	s_isSpawningComponentActive.reset();
	s_isTargetingComponentActive.reset();
	s_isTaskComponentActive.reset();
	s_isTimerComponentActive.reset();
	s_isTransformComponentActive.reset();
	s_isVelocityComponentActive.reset();

	// Begin flush component values
	for (uint16 i = 0u; i < ArgusECSConstants::k_maxEntities; ++i)
	{
		s_AbilityComponents[i] = AbilityComponent();
		s_AvoidanceGroupingComponents[i] = AvoidanceGroupingComponent();
		s_CarrierComponents[i] = CarrierComponent();
		s_CombatComponents[i] = CombatComponent();
		s_ConstructionComponents[i] = ConstructionComponent();
		s_HealthComponents[i] = HealthComponent();
		s_IdentityComponents[i] = IdentityComponent();
		s_NavigationComponents[i] = NavigationComponent();
		s_NearbyEntitiesComponents[i] = NearbyEntitiesComponent();
		s_ObserversComponents[i] = ObserversComponent();
		s_PassengerComponents[i] = PassengerComponent();
		s_ResourceComponents[i] = ResourceComponent();
		s_ResourceExtractionComponents[i] = ResourceExtractionComponent();
		s_SpawningComponents[i] = SpawningComponent();
		s_TargetingComponents[i] = TargetingComponent();
		s_TaskComponents[i] = TaskComponent();
		s_TimerComponents[i] = TimerComponent();
		s_TransformComponents[i] = TransformComponent();
		s_VelocityComponents[i] = VelocityComponent();
	}

	// Begin flush dynamically allocated components
	s_InputInterfaceComponents.clear();
	s_ReticleComponents.clear();
	s_SpatialPartitioningComponents.clear();
}

uint16 ArgusComponentRegistry::GetOwningEntityIdForComponentMember(void* memberAddress)
{
	if (memberAddress >= &s_AbilityComponents[0] && memberAddress <= &s_AbilityComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		AbilityComponent* pretendComponent = reinterpret_cast<AbilityComponent*>(memberAddress);
		return pretendComponent - &s_AbilityComponents[0];
	}
	if (memberAddress >= &s_AvoidanceGroupingComponents[0] && memberAddress <= &s_AvoidanceGroupingComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		AvoidanceGroupingComponent* pretendComponent = reinterpret_cast<AvoidanceGroupingComponent*>(memberAddress);
		return pretendComponent - &s_AvoidanceGroupingComponents[0];
	}
	if (memberAddress >= &s_CarrierComponents[0] && memberAddress <= &s_CarrierComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		CarrierComponent* pretendComponent = reinterpret_cast<CarrierComponent*>(memberAddress);
		return pretendComponent - &s_CarrierComponents[0];
	}
	if (memberAddress >= &s_CombatComponents[0] && memberAddress <= &s_CombatComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		CombatComponent* pretendComponent = reinterpret_cast<CombatComponent*>(memberAddress);
		return pretendComponent - &s_CombatComponents[0];
	}
	if (memberAddress >= &s_ConstructionComponents[0] && memberAddress <= &s_ConstructionComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		ConstructionComponent* pretendComponent = reinterpret_cast<ConstructionComponent*>(memberAddress);
		return pretendComponent - &s_ConstructionComponents[0];
	}
	if (memberAddress >= &s_HealthComponents[0] && memberAddress <= &s_HealthComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		HealthComponent* pretendComponent = reinterpret_cast<HealthComponent*>(memberAddress);
		return pretendComponent - &s_HealthComponents[0];
	}
	if (memberAddress >= &s_IdentityComponents[0] && memberAddress <= &s_IdentityComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		IdentityComponent* pretendComponent = reinterpret_cast<IdentityComponent*>(memberAddress);
		return pretendComponent - &s_IdentityComponents[0];
	}
	if (memberAddress >= &s_NavigationComponents[0] && memberAddress <= &s_NavigationComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		NavigationComponent* pretendComponent = reinterpret_cast<NavigationComponent*>(memberAddress);
		return pretendComponent - &s_NavigationComponents[0];
	}
	if (memberAddress >= &s_NearbyEntitiesComponents[0] && memberAddress <= &s_NearbyEntitiesComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		NearbyEntitiesComponent* pretendComponent = reinterpret_cast<NearbyEntitiesComponent*>(memberAddress);
		return pretendComponent - &s_NearbyEntitiesComponents[0];
	}
	if (memberAddress >= &s_ObserversComponents[0] && memberAddress <= &s_ObserversComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		ObserversComponent* pretendComponent = reinterpret_cast<ObserversComponent*>(memberAddress);
		return pretendComponent - &s_ObserversComponents[0];
	}
	if (memberAddress >= &s_PassengerComponents[0] && memberAddress <= &s_PassengerComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		PassengerComponent* pretendComponent = reinterpret_cast<PassengerComponent*>(memberAddress);
		return pretendComponent - &s_PassengerComponents[0];
	}
	if (memberAddress >= &s_ResourceComponents[0] && memberAddress <= &s_ResourceComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		ResourceComponent* pretendComponent = reinterpret_cast<ResourceComponent*>(memberAddress);
		return pretendComponent - &s_ResourceComponents[0];
	}
	if (memberAddress >= &s_ResourceExtractionComponents[0] && memberAddress <= &s_ResourceExtractionComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		ResourceExtractionComponent* pretendComponent = reinterpret_cast<ResourceExtractionComponent*>(memberAddress);
		return pretendComponent - &s_ResourceExtractionComponents[0];
	}
	if (memberAddress >= &s_SpawningComponents[0] && memberAddress <= &s_SpawningComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		SpawningComponent* pretendComponent = reinterpret_cast<SpawningComponent*>(memberAddress);
		return pretendComponent - &s_SpawningComponents[0];
	}
	if (memberAddress >= &s_TargetingComponents[0] && memberAddress <= &s_TargetingComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		TargetingComponent* pretendComponent = reinterpret_cast<TargetingComponent*>(memberAddress);
		return pretendComponent - &s_TargetingComponents[0];
	}
	if (memberAddress >= &s_TaskComponents[0] && memberAddress <= &s_TaskComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		TaskComponent* pretendComponent = reinterpret_cast<TaskComponent*>(memberAddress);
		return pretendComponent - &s_TaskComponents[0];
	}
	if (memberAddress >= &s_TimerComponents[0] && memberAddress <= &s_TimerComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		TimerComponent* pretendComponent = reinterpret_cast<TimerComponent*>(memberAddress);
		return pretendComponent - &s_TimerComponents[0];
	}
	if (memberAddress >= &s_TransformComponents[0] && memberAddress <= &s_TransformComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		TransformComponent* pretendComponent = reinterpret_cast<TransformComponent*>(memberAddress);
		return pretendComponent - &s_TransformComponents[0];
	}
	if (memberAddress >= &s_VelocityComponents[0] && memberAddress <= &s_VelocityComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		VelocityComponent* pretendComponent = reinterpret_cast<VelocityComponent*>(memberAddress);
		return pretendComponent - &s_VelocityComponents[0];
	}

	return ArgusECSConstants::k_maxEntities;
}

#if !UE_BUILD_SHIPPING
void ArgusComponentRegistry::DrawComponentsDebug(uint16 entityId)
{
	if (const AbilityComponent* AbilityComponentPtr = GetComponent<AbilityComponent>(entityId))
	{
		AbilityComponentPtr->DrawComponentDebug();
	}
	if (const AvoidanceGroupingComponent* AvoidanceGroupingComponentPtr = GetComponent<AvoidanceGroupingComponent>(entityId))
	{
		AvoidanceGroupingComponentPtr->DrawComponentDebug();
	}
	if (const CarrierComponent* CarrierComponentPtr = GetComponent<CarrierComponent>(entityId))
	{
		CarrierComponentPtr->DrawComponentDebug();
	}
	if (const CombatComponent* CombatComponentPtr = GetComponent<CombatComponent>(entityId))
	{
		CombatComponentPtr->DrawComponentDebug();
	}
	if (const ConstructionComponent* ConstructionComponentPtr = GetComponent<ConstructionComponent>(entityId))
	{
		ConstructionComponentPtr->DrawComponentDebug();
	}
	if (const HealthComponent* HealthComponentPtr = GetComponent<HealthComponent>(entityId))
	{
		HealthComponentPtr->DrawComponentDebug();
	}
	if (const IdentityComponent* IdentityComponentPtr = GetComponent<IdentityComponent>(entityId))
	{
		IdentityComponentPtr->DrawComponentDebug();
	}
	if (const NavigationComponent* NavigationComponentPtr = GetComponent<NavigationComponent>(entityId))
	{
		NavigationComponentPtr->DrawComponentDebug();
	}
	if (const NearbyEntitiesComponent* NearbyEntitiesComponentPtr = GetComponent<NearbyEntitiesComponent>(entityId))
	{
		NearbyEntitiesComponentPtr->DrawComponentDebug();
	}
	if (const ObserversComponent* ObserversComponentPtr = GetComponent<ObserversComponent>(entityId))
	{
		ObserversComponentPtr->DrawComponentDebug();
	}
	if (const PassengerComponent* PassengerComponentPtr = GetComponent<PassengerComponent>(entityId))
	{
		PassengerComponentPtr->DrawComponentDebug();
	}
	if (const ResourceComponent* ResourceComponentPtr = GetComponent<ResourceComponent>(entityId))
	{
		ResourceComponentPtr->DrawComponentDebug();
	}
	if (const ResourceExtractionComponent* ResourceExtractionComponentPtr = GetComponent<ResourceExtractionComponent>(entityId))
	{
		ResourceExtractionComponentPtr->DrawComponentDebug();
	}
	if (const SpawningComponent* SpawningComponentPtr = GetComponent<SpawningComponent>(entityId))
	{
		SpawningComponentPtr->DrawComponentDebug();
	}
	if (const TargetingComponent* TargetingComponentPtr = GetComponent<TargetingComponent>(entityId))
	{
		TargetingComponentPtr->DrawComponentDebug();
	}
	if (const TaskComponent* TaskComponentPtr = GetComponent<TaskComponent>(entityId))
	{
		TaskComponentPtr->DrawComponentDebug();
	}
	if (const TimerComponent* TimerComponentPtr = GetComponent<TimerComponent>(entityId))
	{
		TimerComponentPtr->DrawComponentDebug();
	}
	if (const TransformComponent* TransformComponentPtr = GetComponent<TransformComponent>(entityId))
	{
		TransformComponentPtr->DrawComponentDebug();
	}
	if (const VelocityComponent* VelocityComponentPtr = GetComponent<VelocityComponent>(entityId))
	{
		VelocityComponentPtr->DrawComponentDebug();
	}
	if (const InputInterfaceComponent* InputInterfaceComponentPtr = GetComponent<InputInterfaceComponent>(entityId))
	{
		InputInterfaceComponentPtr->DrawComponentDebug();
	}
	if (const ReticleComponent* ReticleComponentPtr = GetComponent<ReticleComponent>(entityId))
	{
		ReticleComponentPtr->DrawComponentDebug();
	}
	if (const SpatialPartitioningComponent* SpatialPartitioningComponentPtr = GetComponent<SpatialPartitioningComponent>(entityId))
	{
		SpatialPartitioningComponentPtr->DrawComponentDebug();
	}
}
#endif //!UE_BUILD_SHIPPING
