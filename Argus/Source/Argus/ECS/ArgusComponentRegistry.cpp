// Copyright Karazaa. This is a part of an RTS project called Argus.
// AUTOGENERATED FILE

#include "ArgusComponentRegistry.h"
#include "ArgusMemorySource.h"

// Begin component specific definitions
#pragma region AbilityComponent
AbilityComponent* ArgusComponentRegistry::s_AbilityComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isAbilityComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region AvoidanceGroupingComponent
AvoidanceGroupingComponent* ArgusComponentRegistry::s_AvoidanceGroupingComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isAvoidanceGroupingComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region CarrierComponent
CarrierComponent* ArgusComponentRegistry::s_CarrierComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isCarrierComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region CombatComponent
CombatComponent* ArgusComponentRegistry::s_CombatComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isCombatComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region ConstructionComponent
ConstructionComponent* ArgusComponentRegistry::s_ConstructionComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isConstructionComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region HealthComponent
HealthComponent* ArgusComponentRegistry::s_HealthComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isHealthComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region IdentityComponent
IdentityComponent* ArgusComponentRegistry::s_IdentityComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isIdentityComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region NavigationComponent
NavigationComponent* ArgusComponentRegistry::s_NavigationComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isNavigationComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region NearbyEntitiesComponent
NearbyEntitiesComponent* ArgusComponentRegistry::s_NearbyEntitiesComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isNearbyEntitiesComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region ObserversComponent
ObserversComponent* ArgusComponentRegistry::s_ObserversComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isObserversComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region PassengerComponent
PassengerComponent* ArgusComponentRegistry::s_PassengerComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isPassengerComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region ResourceComponent
ResourceComponent* ArgusComponentRegistry::s_ResourceComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isResourceComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region ResourceExtractionComponent
ResourceExtractionComponent* ArgusComponentRegistry::s_ResourceExtractionComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isResourceExtractionComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region SpawningComponent
SpawningComponent* ArgusComponentRegistry::s_SpawningComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isSpawningComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region TargetingComponent
TargetingComponent* ArgusComponentRegistry::s_TargetingComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isTargetingComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region TaskComponent
TaskComponent* ArgusComponentRegistry::s_TaskComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isTaskComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region TimerComponent
TimerComponent* ArgusComponentRegistry::s_TimerComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isTimerComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region TransformComponent
TransformComponent* ArgusComponentRegistry::s_TransformComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isTransformComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region VelocityComponent
VelocityComponent* ArgusComponentRegistry::s_VelocityComponents = nullptr;
std::bitset<ArgusECSConstants::k_maxEntities> ArgusComponentRegistry::s_isVelocityComponentActive = std::bitset<ArgusECSConstants::k_maxEntities>();
#pragma endregion
#pragma region AssetLoadingComponent
TMap<uint16, AssetLoadingComponent> ArgusComponentRegistry::s_AssetLoadingComponents;
#pragma endregion
#pragma region InputInterfaceComponent
TMap<uint16, InputInterfaceComponent> ArgusComponentRegistry::s_InputInterfaceComponents;
#pragma endregion
#pragma region ReticleComponent
TMap<uint16, ReticleComponent> ArgusComponentRegistry::s_ReticleComponents;
#pragma endregion
#pragma region SpatialPartitioningComponent
TMap<uint16, SpatialPartitioningComponent> ArgusComponentRegistry::s_SpatialPartitioningComponents;
#pragma endregion

void ArgusComponentRegistry::RemoveComponentsForEntity(uint16 entityId)
{
	if (UNLIKELY(entityId >= ArgusECSConstants::k_maxEntities))
	{
		ARGUS_LOG(ArgusECSLog, Error, TEXT("[%s] Invalid entity id %d."), ARGUS_FUNCNAME, entityId);
		return;
	}

	// Begin set bitset bits to false
	s_isAbilityComponentActive.set(entityId, false);
	s_isAvoidanceGroupingComponentActive.set(entityId, false);
	s_isCarrierComponentActive.set(entityId, false);
	s_isCombatComponentActive.set(entityId, false);
	s_isConstructionComponentActive.set(entityId, false);
	s_isHealthComponentActive.set(entityId, false);
	s_isIdentityComponentActive.set(entityId, false);
	s_isNavigationComponentActive.set(entityId, false);
	s_isNearbyEntitiesComponentActive.set(entityId, false);
	s_isObserversComponentActive.set(entityId, false);
	s_isPassengerComponentActive.set(entityId, false);
	s_isResourceComponentActive.set(entityId, false);
	s_isResourceExtractionComponentActive.set(entityId, false);
	s_isSpawningComponentActive.set(entityId, false);
	s_isTargetingComponentActive.set(entityId, false);
	s_isTaskComponentActive.set(entityId, false);
	s_isTimerComponentActive.set(entityId, false);
	s_isTransformComponentActive.set(entityId, false);
	s_isVelocityComponentActive.set(entityId, false);

	// Begin set component values
	s_AbilityComponents[entityId].Reset();
	s_AvoidanceGroupingComponents[entityId].Reset();
	s_CarrierComponents[entityId].Reset();
	s_CombatComponents[entityId].Reset();
	s_ConstructionComponents[entityId].Reset();
	s_HealthComponents[entityId].Reset();
	s_IdentityComponents[entityId].Reset();
	s_NavigationComponents[entityId].Reset();
	s_NearbyEntitiesComponents[entityId].Reset();
	s_ObserversComponents[entityId].Reset();
	s_PassengerComponents[entityId].Reset();
	s_ResourceComponents[entityId].Reset();
	s_ResourceExtractionComponents[entityId].Reset();
	s_SpawningComponents[entityId].Reset();
	s_TargetingComponents[entityId].Reset();
	s_TaskComponents[entityId].Reset();
	s_TimerComponents[entityId].Reset();
	s_TransformComponents[entityId].Reset();
	s_VelocityComponents[entityId].Reset();

	// Begin remove dynamically allocated components
	if (s_AssetLoadingComponents.Contains(entityId))
	{
		s_AssetLoadingComponents.Remove(entityId);
	}
	if (s_InputInterfaceComponents.Contains(entityId))
	{
		s_InputInterfaceComponents.Remove(entityId);
	}
	if (s_ReticleComponents.Contains(entityId))
	{
		s_ReticleComponents.Remove(entityId);
	}
	if (s_SpatialPartitioningComponents.Contains(entityId))
	{
		s_SpatialPartitioningComponents.Remove(entityId);
	}
}

void ArgusComponentRegistry::FlushAllComponents()
{
	// Begin flush active component bitsets. Allocate component arrays if necessary.
	bool didAllocateAbilityComponents = false;
	if (!s_AbilityComponents)
	{
		didAllocateAbilityComponents = true;
		s_AbilityComponents = ArgusMemorySource::Reallocate<AbilityComponent>(s_AbilityComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isAbilityComponentActive.reset();
	bool didAllocateAvoidanceGroupingComponents = false;
	if (!s_AvoidanceGroupingComponents)
	{
		didAllocateAvoidanceGroupingComponents = true;
		s_AvoidanceGroupingComponents = ArgusMemorySource::Reallocate<AvoidanceGroupingComponent>(s_AvoidanceGroupingComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isAvoidanceGroupingComponentActive.reset();
	bool didAllocateCarrierComponents = false;
	if (!s_CarrierComponents)
	{
		didAllocateCarrierComponents = true;
		s_CarrierComponents = ArgusMemorySource::Reallocate<CarrierComponent>(s_CarrierComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isCarrierComponentActive.reset();
	bool didAllocateCombatComponents = false;
	if (!s_CombatComponents)
	{
		didAllocateCombatComponents = true;
		s_CombatComponents = ArgusMemorySource::Reallocate<CombatComponent>(s_CombatComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isCombatComponentActive.reset();
	bool didAllocateConstructionComponents = false;
	if (!s_ConstructionComponents)
	{
		didAllocateConstructionComponents = true;
		s_ConstructionComponents = ArgusMemorySource::Reallocate<ConstructionComponent>(s_ConstructionComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isConstructionComponentActive.reset();
	bool didAllocateHealthComponents = false;
	if (!s_HealthComponents)
	{
		didAllocateHealthComponents = true;
		s_HealthComponents = ArgusMemorySource::Reallocate<HealthComponent>(s_HealthComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isHealthComponentActive.reset();
	bool didAllocateIdentityComponents = false;
	if (!s_IdentityComponents)
	{
		didAllocateIdentityComponents = true;
		s_IdentityComponents = ArgusMemorySource::Reallocate<IdentityComponent>(s_IdentityComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isIdentityComponentActive.reset();
	bool didAllocateNavigationComponents = false;
	if (!s_NavigationComponents)
	{
		didAllocateNavigationComponents = true;
		s_NavigationComponents = ArgusMemorySource::Reallocate<NavigationComponent>(s_NavigationComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isNavigationComponentActive.reset();
	bool didAllocateNearbyEntitiesComponents = false;
	if (!s_NearbyEntitiesComponents)
	{
		didAllocateNearbyEntitiesComponents = true;
		s_NearbyEntitiesComponents = ArgusMemorySource::Reallocate<NearbyEntitiesComponent>(s_NearbyEntitiesComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isNearbyEntitiesComponentActive.reset();
	bool didAllocateObserversComponents = false;
	if (!s_ObserversComponents)
	{
		didAllocateObserversComponents = true;
		s_ObserversComponents = ArgusMemorySource::Reallocate<ObserversComponent>(s_ObserversComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isObserversComponentActive.reset();
	bool didAllocatePassengerComponents = false;
	if (!s_PassengerComponents)
	{
		didAllocatePassengerComponents = true;
		s_PassengerComponents = ArgusMemorySource::Reallocate<PassengerComponent>(s_PassengerComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isPassengerComponentActive.reset();
	bool didAllocateResourceComponents = false;
	if (!s_ResourceComponents)
	{
		didAllocateResourceComponents = true;
		s_ResourceComponents = ArgusMemorySource::Reallocate<ResourceComponent>(s_ResourceComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isResourceComponentActive.reset();
	bool didAllocateResourceExtractionComponents = false;
	if (!s_ResourceExtractionComponents)
	{
		didAllocateResourceExtractionComponents = true;
		s_ResourceExtractionComponents = ArgusMemorySource::Reallocate<ResourceExtractionComponent>(s_ResourceExtractionComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isResourceExtractionComponentActive.reset();
	bool didAllocateSpawningComponents = false;
	if (!s_SpawningComponents)
	{
		didAllocateSpawningComponents = true;
		s_SpawningComponents = ArgusMemorySource::Reallocate<SpawningComponent>(s_SpawningComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isSpawningComponentActive.reset();
	bool didAllocateTargetingComponents = false;
	if (!s_TargetingComponents)
	{
		didAllocateTargetingComponents = true;
		s_TargetingComponents = ArgusMemorySource::Reallocate<TargetingComponent>(s_TargetingComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isTargetingComponentActive.reset();
	bool didAllocateTaskComponents = false;
	if (!s_TaskComponents)
	{
		didAllocateTaskComponents = true;
		s_TaskComponents = ArgusMemorySource::Reallocate<TaskComponent>(s_TaskComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isTaskComponentActive.reset();
	bool didAllocateTimerComponents = false;
	if (!s_TimerComponents)
	{
		didAllocateTimerComponents = true;
		s_TimerComponents = ArgusMemorySource::Reallocate<TimerComponent>(s_TimerComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isTimerComponentActive.reset();
	bool didAllocateTransformComponents = false;
	if (!s_TransformComponents)
	{
		didAllocateTransformComponents = true;
		s_TransformComponents = ArgusMemorySource::Reallocate<TransformComponent>(s_TransformComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isTransformComponentActive.reset();
	bool didAllocateVelocityComponents = false;
	if (!s_VelocityComponents)
	{
		didAllocateVelocityComponents = true;
		s_VelocityComponents = ArgusMemorySource::Reallocate<VelocityComponent>(s_VelocityComponents, 0, ArgusECSConstants::k_maxEntities);
	}
	s_isVelocityComponentActive.reset();

	// Begin flush component values or construct components.
	for (uint16 i = 0u; i < ArgusECSConstants::k_maxEntities; ++i)
	{
		if (didAllocateAbilityComponents)
		{
			new (&s_AbilityComponents[i]) AbilityComponent();
		}
		else
		{
			s_AbilityComponents[i].Reset();
		}
		if (didAllocateAvoidanceGroupingComponents)
		{
			new (&s_AvoidanceGroupingComponents[i]) AvoidanceGroupingComponent();
		}
		else
		{
			s_AvoidanceGroupingComponents[i].Reset();
		}
		if (didAllocateCarrierComponents)
		{
			new (&s_CarrierComponents[i]) CarrierComponent();
		}
		else
		{
			s_CarrierComponents[i].Reset();
		}
		if (didAllocateCombatComponents)
		{
			new (&s_CombatComponents[i]) CombatComponent();
		}
		else
		{
			s_CombatComponents[i].Reset();
		}
		if (didAllocateConstructionComponents)
		{
			new (&s_ConstructionComponents[i]) ConstructionComponent();
		}
		else
		{
			s_ConstructionComponents[i].Reset();
		}
		if (didAllocateHealthComponents)
		{
			new (&s_HealthComponents[i]) HealthComponent();
		}
		else
		{
			s_HealthComponents[i].Reset();
		}
		if (didAllocateIdentityComponents)
		{
			new (&s_IdentityComponents[i]) IdentityComponent();
		}
		else
		{
			s_IdentityComponents[i].Reset();
		}
		if (didAllocateNavigationComponents)
		{
			new (&s_NavigationComponents[i]) NavigationComponent();
		}
		else
		{
			s_NavigationComponents[i].Reset();
		}
		if (didAllocateNearbyEntitiesComponents)
		{
			new (&s_NearbyEntitiesComponents[i]) NearbyEntitiesComponent();
		}
		else
		{
			s_NearbyEntitiesComponents[i].Reset();
		}
		if (didAllocateObserversComponents)
		{
			new (&s_ObserversComponents[i]) ObserversComponent();
		}
		else
		{
			s_ObserversComponents[i].Reset();
		}
		if (didAllocatePassengerComponents)
		{
			new (&s_PassengerComponents[i]) PassengerComponent();
		}
		else
		{
			s_PassengerComponents[i].Reset();
		}
		if (didAllocateResourceComponents)
		{
			new (&s_ResourceComponents[i]) ResourceComponent();
		}
		else
		{
			s_ResourceComponents[i].Reset();
		}
		if (didAllocateResourceExtractionComponents)
		{
			new (&s_ResourceExtractionComponents[i]) ResourceExtractionComponent();
		}
		else
		{
			s_ResourceExtractionComponents[i].Reset();
		}
		if (didAllocateSpawningComponents)
		{
			new (&s_SpawningComponents[i]) SpawningComponent();
		}
		else
		{
			s_SpawningComponents[i].Reset();
		}
		if (didAllocateTargetingComponents)
		{
			new (&s_TargetingComponents[i]) TargetingComponent();
		}
		else
		{
			s_TargetingComponents[i].Reset();
		}
		if (didAllocateTaskComponents)
		{
			new (&s_TaskComponents[i]) TaskComponent();
		}
		else
		{
			s_TaskComponents[i].Reset();
		}
		if (didAllocateTimerComponents)
		{
			new (&s_TimerComponents[i]) TimerComponent();
		}
		else
		{
			s_TimerComponents[i].Reset();
		}
		if (didAllocateTransformComponents)
		{
			new (&s_TransformComponents[i]) TransformComponent();
		}
		else
		{
			s_TransformComponents[i].Reset();
		}
		if (didAllocateVelocityComponents)
		{
			new (&s_VelocityComponents[i]) VelocityComponent();
		}
		else
		{
			s_VelocityComponents[i].Reset();
		}
	}

	// Begin flush dynamically allocated components
	s_AssetLoadingComponents.Reset();
	s_InputInterfaceComponents.Reset();
	s_ReticleComponents.Reset();
	s_SpatialPartitioningComponents.Reset();
}

uint16 ArgusComponentRegistry::GetOwningEntityIdForComponentMember(void* memberAddress)
{
	if (memberAddress >= &s_AbilityComponents[0] && memberAddress <= &s_AbilityComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		AbilityComponent* pretendComponent = reinterpret_cast<AbilityComponent*>(memberAddress);
		return pretendComponent - &s_AbilityComponents[0];
	}
	if (memberAddress >= &s_AvoidanceGroupingComponents[0] && memberAddress <= &s_AvoidanceGroupingComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		AvoidanceGroupingComponent* pretendComponent = reinterpret_cast<AvoidanceGroupingComponent*>(memberAddress);
		return pretendComponent - &s_AvoidanceGroupingComponents[0];
	}
	if (memberAddress >= &s_CarrierComponents[0] && memberAddress <= &s_CarrierComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		CarrierComponent* pretendComponent = reinterpret_cast<CarrierComponent*>(memberAddress);
		return pretendComponent - &s_CarrierComponents[0];
	}
	if (memberAddress >= &s_CombatComponents[0] && memberAddress <= &s_CombatComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		CombatComponent* pretendComponent = reinterpret_cast<CombatComponent*>(memberAddress);
		return pretendComponent - &s_CombatComponents[0];
	}
	if (memberAddress >= &s_ConstructionComponents[0] && memberAddress <= &s_ConstructionComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		ConstructionComponent* pretendComponent = reinterpret_cast<ConstructionComponent*>(memberAddress);
		return pretendComponent - &s_ConstructionComponents[0];
	}
	if (memberAddress >= &s_HealthComponents[0] && memberAddress <= &s_HealthComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		HealthComponent* pretendComponent = reinterpret_cast<HealthComponent*>(memberAddress);
		return pretendComponent - &s_HealthComponents[0];
	}
	if (memberAddress >= &s_IdentityComponents[0] && memberAddress <= &s_IdentityComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		IdentityComponent* pretendComponent = reinterpret_cast<IdentityComponent*>(memberAddress);
		return pretendComponent - &s_IdentityComponents[0];
	}
	if (memberAddress >= &s_NavigationComponents[0] && memberAddress <= &s_NavigationComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		NavigationComponent* pretendComponent = reinterpret_cast<NavigationComponent*>(memberAddress);
		return pretendComponent - &s_NavigationComponents[0];
	}
	if (memberAddress >= &s_NearbyEntitiesComponents[0] && memberAddress <= &s_NearbyEntitiesComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		NearbyEntitiesComponent* pretendComponent = reinterpret_cast<NearbyEntitiesComponent*>(memberAddress);
		return pretendComponent - &s_NearbyEntitiesComponents[0];
	}
	if (memberAddress >= &s_ObserversComponents[0] && memberAddress <= &s_ObserversComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		ObserversComponent* pretendComponent = reinterpret_cast<ObserversComponent*>(memberAddress);
		return pretendComponent - &s_ObserversComponents[0];
	}
	if (memberAddress >= &s_PassengerComponents[0] && memberAddress <= &s_PassengerComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		PassengerComponent* pretendComponent = reinterpret_cast<PassengerComponent*>(memberAddress);
		return pretendComponent - &s_PassengerComponents[0];
	}
	if (memberAddress >= &s_ResourceComponents[0] && memberAddress <= &s_ResourceComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		ResourceComponent* pretendComponent = reinterpret_cast<ResourceComponent*>(memberAddress);
		return pretendComponent - &s_ResourceComponents[0];
	}
	if (memberAddress >= &s_ResourceExtractionComponents[0] && memberAddress <= &s_ResourceExtractionComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		ResourceExtractionComponent* pretendComponent = reinterpret_cast<ResourceExtractionComponent*>(memberAddress);
		return pretendComponent - &s_ResourceExtractionComponents[0];
	}
	if (memberAddress >= &s_SpawningComponents[0] && memberAddress <= &s_SpawningComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		SpawningComponent* pretendComponent = reinterpret_cast<SpawningComponent*>(memberAddress);
		return pretendComponent - &s_SpawningComponents[0];
	}
	if (memberAddress >= &s_TargetingComponents[0] && memberAddress <= &s_TargetingComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		TargetingComponent* pretendComponent = reinterpret_cast<TargetingComponent*>(memberAddress);
		return pretendComponent - &s_TargetingComponents[0];
	}
	if (memberAddress >= &s_TaskComponents[0] && memberAddress <= &s_TaskComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		TaskComponent* pretendComponent = reinterpret_cast<TaskComponent*>(memberAddress);
		return pretendComponent - &s_TaskComponents[0];
	}
	if (memberAddress >= &s_TimerComponents[0] && memberAddress <= &s_TimerComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		TimerComponent* pretendComponent = reinterpret_cast<TimerComponent*>(memberAddress);
		return pretendComponent - &s_TimerComponents[0];
	}
	if (memberAddress >= &s_TransformComponents[0] && memberAddress <= &s_TransformComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		TransformComponent* pretendComponent = reinterpret_cast<TransformComponent*>(memberAddress);
		return pretendComponent - &s_TransformComponents[0];
	}
	if (memberAddress >= &s_VelocityComponents[0] && memberAddress <= &s_VelocityComponents[ArgusECSConstants::k_maxEntities - 1])
	{
		VelocityComponent* pretendComponent = reinterpret_cast<VelocityComponent*>(memberAddress);
		return pretendComponent - &s_VelocityComponents[0];
	}

	return ArgusECSConstants::k_maxEntities;
}

#if !UE_BUILD_SHIPPING
void ArgusComponentRegistry::DrawComponentsDebug(uint16 entityId)
{
	if (const AbilityComponent* AbilityComponentPtr = GetComponent<AbilityComponent>(entityId))
	{
		AbilityComponentPtr->DrawComponentDebug();
	}
	if (const AvoidanceGroupingComponent* AvoidanceGroupingComponentPtr = GetComponent<AvoidanceGroupingComponent>(entityId))
	{
		AvoidanceGroupingComponentPtr->DrawComponentDebug();
	}
	if (const CarrierComponent* CarrierComponentPtr = GetComponent<CarrierComponent>(entityId))
	{
		CarrierComponentPtr->DrawComponentDebug();
	}
	if (const CombatComponent* CombatComponentPtr = GetComponent<CombatComponent>(entityId))
	{
		CombatComponentPtr->DrawComponentDebug();
	}
	if (const ConstructionComponent* ConstructionComponentPtr = GetComponent<ConstructionComponent>(entityId))
	{
		ConstructionComponentPtr->DrawComponentDebug();
	}
	if (const HealthComponent* HealthComponentPtr = GetComponent<HealthComponent>(entityId))
	{
		HealthComponentPtr->DrawComponentDebug();
	}
	if (const IdentityComponent* IdentityComponentPtr = GetComponent<IdentityComponent>(entityId))
	{
		IdentityComponentPtr->DrawComponentDebug();
	}
	if (const NavigationComponent* NavigationComponentPtr = GetComponent<NavigationComponent>(entityId))
	{
		NavigationComponentPtr->DrawComponentDebug();
	}
	if (const NearbyEntitiesComponent* NearbyEntitiesComponentPtr = GetComponent<NearbyEntitiesComponent>(entityId))
	{
		NearbyEntitiesComponentPtr->DrawComponentDebug();
	}
	if (const ObserversComponent* ObserversComponentPtr = GetComponent<ObserversComponent>(entityId))
	{
		ObserversComponentPtr->DrawComponentDebug();
	}
	if (const PassengerComponent* PassengerComponentPtr = GetComponent<PassengerComponent>(entityId))
	{
		PassengerComponentPtr->DrawComponentDebug();
	}
	if (const ResourceComponent* ResourceComponentPtr = GetComponent<ResourceComponent>(entityId))
	{
		ResourceComponentPtr->DrawComponentDebug();
	}
	if (const ResourceExtractionComponent* ResourceExtractionComponentPtr = GetComponent<ResourceExtractionComponent>(entityId))
	{
		ResourceExtractionComponentPtr->DrawComponentDebug();
	}
	if (const SpawningComponent* SpawningComponentPtr = GetComponent<SpawningComponent>(entityId))
	{
		SpawningComponentPtr->DrawComponentDebug();
	}
	if (const TargetingComponent* TargetingComponentPtr = GetComponent<TargetingComponent>(entityId))
	{
		TargetingComponentPtr->DrawComponentDebug();
	}
	if (const TaskComponent* TaskComponentPtr = GetComponent<TaskComponent>(entityId))
	{
		TaskComponentPtr->DrawComponentDebug();
	}
	if (const TimerComponent* TimerComponentPtr = GetComponent<TimerComponent>(entityId))
	{
		TimerComponentPtr->DrawComponentDebug();
	}
	if (const TransformComponent* TransformComponentPtr = GetComponent<TransformComponent>(entityId))
	{
		TransformComponentPtr->DrawComponentDebug();
	}
	if (const VelocityComponent* VelocityComponentPtr = GetComponent<VelocityComponent>(entityId))
	{
		VelocityComponentPtr->DrawComponentDebug();
	}
	if (const AssetLoadingComponent* AssetLoadingComponentPtr = GetComponent<AssetLoadingComponent>(entityId))
	{
		AssetLoadingComponentPtr->DrawComponentDebug();
	}
	if (const InputInterfaceComponent* InputInterfaceComponentPtr = GetComponent<InputInterfaceComponent>(entityId))
	{
		InputInterfaceComponentPtr->DrawComponentDebug();
	}
	if (const ReticleComponent* ReticleComponentPtr = GetComponent<ReticleComponent>(entityId))
	{
		ReticleComponentPtr->DrawComponentDebug();
	}
	if (const SpatialPartitioningComponent* SpatialPartitioningComponentPtr = GetComponent<SpatialPartitioningComponent>(entityId))
	{
		SpatialPartitioningComponentPtr->DrawComponentDebug();
	}
}
#endif //!UE_BUILD_SHIPPING
